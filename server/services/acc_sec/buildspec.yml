version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.10
    commands:
      - echo Skipping dependency installation...
  pre_build:
    commands:
      - echo Pre-build phase...
  build:
    commands:
      - echo Build started on `date`
      - cd $CODEBUILD_SRC_DIR/server/services/acc_sec
      - zip -r9 /tmp/function.zip lambda_function.py  # Replace with your actual Lambda file name
  post_build:
    commands:
      - echo Build completed on `date`
      - aws s3 cp /tmp/function.zip s3://draft-lambda-functions/acc_sec/function.zip
      - version_id=$(aws s3api list-object-versions --bucket draft-lambda-functions --prefix "acc_sec/function.zip" --query 'Versions[0].VersionId' --output text)
      - echo "FunctionCodeS3ObjectVersion=$version_id" > $CODEBUILD_SRC_DIR/version_id.properties
      - echo Checking the contents of version_id.properties...
      - cat $CODEBUILD_SRC_DIR/version_id.properties
      - sed -i 's/VERSION_ID_PLACEHOLDER/'"$version_id"'/' $CODEBUILD_SRC_DIR/server/services/acc_sec/deploy.yaml
      - echo "Updated deploy.yaml with actual version_id:"
      - cat $CODEBUILD_SRC_DIR/server/services/acc_sec/deploy.yaml
      - aws s3 cp $CODEBUILD_SRC_DIR/server/services/acc_sec/deploy.yaml s3://draft-lambda-functions/acc_sec/deploy.yaml
artifacts:
  files:
    - server/services/acc_sec/lambda_function.py
    - server/services/acc_sec/deploy.yaml
    - version_id.properties
  name: connect_client  # This is the output artifact name that will be used in CodePipeline

cache:
  paths:
    - '/root/.cache/pip/**/*'
